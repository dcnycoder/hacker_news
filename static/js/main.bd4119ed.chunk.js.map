{"version":3,"sources":["NewApp/Store.js","NewApp/StoriesReducer.js","NewApp/SearchHistory.js","NewApp/Navigation.js","NewApp/Footer.js","NewApp/Search.js","NewApp/List.js","NewApp/AppNew.js","serviceWorker.js","index.js"],"names":["Store","React","createContext","StoriesReducer","state","action","type","isLoading","isError","console","log","url","stories","payload","search","searchHistory","newHistory","SearchHistory","useContext","onSearchSubmit","dispatch","onSearchChange","Object","keys","length","className","map","item","value","onClick","event","Navigation","children","Footer","Search","id","onSubmit","defaultValue","onChange","List","useMemo","story","href","target","title","AppNew","initialState","useReducer","useEffect","axios","get","then","response","data","hits","filter","catch","error","Provider","preventDefault","searchTerm","document","getElementById","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"oNAGeA,EADDC,IAAMC,gB,OCiCLC,EAnCQ,SAACC,EAAOC,GAE7B,OAAOA,EAAOC,MACZ,IAAK,qBACH,OAAO,2BAAIF,GAAX,IAAkBG,WAAW,EAAMC,SAAS,IAE9C,IAAK,wBAEH,OADAC,QAAQC,IAAI,6CAA8CN,EAAMO,KACzD,2BAAIP,GAAX,IAAkBQ,QAASP,EAAOQ,QAASN,WAAW,EAAOC,SAAS,IAExE,IAAK,wBACH,OAAO,2BAAIJ,GAAX,IAAkBG,WAAW,EAAOC,SAAS,IAE/C,IAAK,gBACH,OAAO,2BAAIJ,GAAX,IAAkBU,OAAQT,EAAOQ,UAEnC,IAAK,UAEH,OADAJ,QAAQC,IAAI,oCAAqCL,EAAOQ,SACjD,2BAAIT,GAAX,IAAkBO,IAjBD,8CAiBmBN,EAAOQ,UAE7C,IAAK,iBACH,GAAIR,EAAOQ,WAAWT,EAAMW,cAAe,CACzC,IAAIC,EAAU,eAAOZ,EAAMW,eAE3B,OADAC,EAAWX,EAAOQ,UAAY,EACvB,2BAAIT,GAAX,IAAkBW,cAAeC,IAGjC,IAAIA,EAAU,eAAOZ,EAAMW,eAE3B,OADAC,EAAWX,EAAOQ,SAAW,EACtB,2BAAIT,GAAX,IAAkBW,cAAeC,M,oCCJ1BC,EAtBO,WAAO,IAAD,EACgChB,IAAMiB,WAAWlB,GAApEI,EADmB,EACnBA,MAAiCe,GADd,EACZC,SADY,EACFC,eADE,EACcF,gBAExC,OAAIG,OAAOC,KAAKnB,EAAMW,eAAeS,OAAO,EACnC,yBAAKC,UAAU,kBAAf,mBAGHH,OAAOC,KAAKnB,EAAMW,eAAeW,KAAI,SAAAC,GACnC,OAAO,4BAAQF,UAAU,sBACzBG,MAAOD,EAAMrB,KAAK,SAASuB,QAAS,SAACC,GACjCX,EAAeW,KAEhBH,OAMC,yBAAKF,UAAU,oB,4BCJdM,MAZf,YAAiC,IAAZC,EAAW,EAAXA,SACnB,OACE,yBAAKP,UAAU,WACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,QAAf,eACA,yBAAKA,UAAU,UAAUO,IAE3B,yBAAKP,UAAU,aAAf,WCJSQ,EANA,WACb,OAAO,yBAAKR,UAAY,UAAjB,gCCWMS,EAVA,WAAO,IAAD,EACuCjC,IAAMiB,WAAWlB,GAAnDqB,GADL,EACZjB,MADY,EACLgB,SADK,EACKC,gBAAgBF,EADrB,EACqBA,eAExC,OAAO,0BAAMgB,GAAG,SAASC,SAAUjB,GAEjC,2BAAOb,KAAK,OAAO6B,GAAG,cAAcE,aAAa,GAAGC,SAAUjB,IAC9D,4BAAQf,KAAK,UAAb,iBCiBWiC,EAzBF,SAAC,GAAgB,IAAfP,EAAc,EAAdA,SAAc,EACkB/B,IAAMiB,WAAWlB,GAAzDI,MAAQQ,EADc,EACdA,QAASL,EADK,EACLA,UAAWC,EADN,EACMA,QAoBjC,OAlBqBP,IAAMuC,SAAQ,WAEjC,OADA/B,QAAQC,IAAI,kBAAmBE,GAE7B,yBAAKa,UAAU,QACZO,EACAxB,GAAW,0DACTA,GAAWD,EACZ,6EAEA,wBAAIkB,UAAU,WACXb,EAAQc,KAAI,SAAAe,GAAK,OAClB,4BACE,uBAAGC,KAAMD,EAAM9B,IAAKgC,OAAO,UAAUF,EAAMG,eAKpD,CAAChC,EAASL,EAAWC,KCkGXqC,G,OAxGA,WACb,IAAIC,EAAe,CACjBlC,QAAS,GACTE,OAAQ,QACRH,IAPiB,8CAQjBJ,WAAW,EACXC,SAAS,EACTO,cAAe,IAPE,EAoCKd,IAAM8C,WAAW5C,EAAgB2C,GApCtC,mBAoCd1C,EApCc,KAoCPgB,EApCO,KA4DjB,OAvBFnB,IAAM+C,WAAU,WACd5B,EAAS,CAACd,KAAM,uBAChBG,QAAQC,IAAI,mCAAoCN,GAE9C6C,IAAMC,IAAI9C,EAAMO,KACfwC,MAAK,SAACC,GACL3C,QAAQC,IAAI,qBAAsB0C,EAASC,KAAKC,KAAKC,QAAO,SAAAd,GAC1D,OAAoB,MAAbA,EAAMG,UAEfxB,EAAS,CACPd,KAAM,wBACNO,QAASuC,EAASC,KAAKC,KAAKC,QAAO,SAAAd,GACjC,MAAoB,IAAbA,EAAMG,OAAwB,MAAXH,EAAM9B,YAIrC6C,OAAM,SAACC,GACNhD,QAAQgD,MAAMA,QAIjB,CAACrD,EAAMO,MACVF,QAAQC,IAAI,uBAAwBN,EAAMG,UAAWH,EAAMI,SAEvD,kBAAC,EAAMkD,SAAP,CAAgB9B,MAAO,CACrBxB,QACAgB,WACAC,eAtDmB,SAACS,GACxBrB,QAAQC,IAAI,0BAA2BoB,EAAMa,OAAOf,OACpDR,EAAS,CACPd,KAAM,gBACNO,QAASiB,EAAMa,OAAOf,SAmDpBT,eA/CiB,SAACW,GACtBA,EAAM6B,iBACNlD,QAAQC,IAAI,uBAAwBoB,EAAMa,OAAOrC,MACjD,IAAMsD,EAAkC,WAApB9B,EAAMa,OAAOrC,KAAkBwB,EAAMa,OAAOf,MAAQxB,EAAMU,OAC3D+C,SAASC,eAAe,eAChClC,MAAQ,GAGnBR,EAAS,CACPd,KAAM,UACNO,QAAS+C,IAEXxC,EAAS,CACPd,KAAM,iBACNO,QAAS+C,OAmCP,yBAAKnC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,KACE,kBAAC,EAAD,OAEF,kBAAC,EAAD,UC7EUsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJT,SAASC,eAAe,cDsHpB,kBAAmBS,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdnB,OAAM,SAAAC,GACLhD,QAAQgD,MAAMA,EAAMmB,c","file":"static/js/main.bd4119ed.chunk.js","sourcesContent":["import React from 'react'\n\nconst Store = React.createContext()\nexport default Store","const StoriesReducer = (state, action) => {\n  const API_ENDPOINT = \"https://hn.algolia.com/api/v1/search?query=\"\n  switch(action.type) {\n    case \"STORIES_FETCH_INIT\": {\n      return {...state, isLoading: true, isError: false}\n    }\n    case \"STORIES_FETCH_SUCCESS\": {\n      console.log(\"STORIES_FETCH_SUCCESS reached, state.url: \", state.url)\n      return {...state, stories: action.payload, isLoading: false, isError: false}\n    }\n    case \"STORIES_FETCH_FAILURE\": {\n      return {...state, isLoading: false, isError: true}\n    }\n    case \"CHANGE_SEARCH\": {\n      return {...state, search: action.payload}\n    }\n    case \"SET_URL\": {\n      console.log(\"SET_URL reached, the payload is: \", action.payload)\n      return {...state, url: API_ENDPOINT+action.payload}\n    }\n    case \"ADD_TO_HISTORY\": {\n      if (action.payload in state.searchHistory) {\n        let newHistory = {...state.searchHistory}\n        newHistory[action.payload] += 1\n        return {...state, searchHistory: newHistory}\n      }\n      else {\n        let newHistory = {...state.searchHistory}\n        newHistory[action.payload] = 1;\n        return {...state, searchHistory: newHistory}\n      } \n    }\n  }\n}\n\nexport default StoriesReducer","import React from 'react'\nimport Store from './Store'\n\nconst SearchHistory = () => {\n  const {state, dispatch, onSearchChange, onSearchSubmit} = React.useContext(Store)\n\n  if (Object.keys(state.searchHistory).length>0 ){\n    return <div className=\"search-history\">\n      Recent searches: \n      {\n        Object.keys(state.searchHistory).map(item => {\n          return <button className='search-history-item' \n          value={item} type='button' onClick={(event) => {\n              onSearchSubmit(event);\n          }}>\n            {item}\n          </button>\n        })\n      }\n    </div>\n  }\n  else return <div className=\"search-history\"></div>\n\n}\n\nexport default SearchHistory","import React from 'react'\nimport {Nav, Navbar, NavDropdown, Form, FormControl, Button} from 'react-bootstrap'\nimport SearchNew from './SearchNew'\n\n\nfunction Navigation({children}) {\n  return (\n    <div className='top-nav'>\n      <div className='nav-left'>\n        <div className='logo'>NEWS PORTAL</div>\n        <div className='search'>{children}</div>\n      </div>\n      <div className='nav-right'>LOGIN</div>\n    </div>\n  )\n}\n\nexport default Navigation;\n\n\n\n// const NavigationNew = ({children}) => {\n//   return (\n//     <Navbar bg=\"light\" expand=\"lg\" className=\"w-100 navbar\">\n//       <Navbar.Brand href=\"#home\">HACKER NEWS</Navbar.Brand>\n//       <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n//       <Navbar.Collapse id=\"basic-navbar-nav\">\n//         <Nav className=\"mr-auto\">\n//           <Nav.Link href=\"#home\">Home</Nav.Link>\n//           <Nav.Link href=\"#link\">Link</Nav.Link>\n//           <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n//             <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n//             <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n//             <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n//             <NavDropdown.Divider />\n//             <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n//           </NavDropdown>\n//         </Nav>\n//         <Form inline>\n//           <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n//           {/* {children} */}\n          \n//           <Button variant=\"outline-success\">Search</Button>\n//         </Form>\n//       </Navbar.Collapse>\n//       {/* <SearchNew /> */}\n//     </Navbar>\n//   )\n// }\n\n// export default NavigationNew","import React from 'react';\n\nconst Footer = () => {\n  return <div className = 'footer'>\n    Built using Hacker News API\n  </div>\n}\n\nexport default Footer","import React from 'react'\nimport Store from './Store'\n\n\nconst Search = () => {\n  const {state, dispatch, onSearchChange, onSearchSubmit} = React.useContext(Store)\n\n  return <form id='search' onSubmit={onSearchSubmit}>\n    {/* <label>Search news: </label> */}\n    <input type='text' id='search-text' defaultValue='' onChange={onSearchChange} />\n    <button type='submit'>search news</button>\n  </form>\n}\n\nexport default Search","import React from 'react';\nimport Store from './Store';\nconst List = ({children}) => {\n  let {state: {stories, isLoading, isError}} = React.useContext(Store);\n  \n  const memoizedList = React.useMemo(() => {\n    console.log(\"State in List: \", stories);\n    return (\n      <div className='list'>\n        {children}\n        {isError && <div>Something went wrong... </div> }\n        {(!isError && isLoading)? \n          <div>Please wait while the stories are loading.. </div>\n          :\n          <ol className='stories'>\n            {stories.map(story => \n            <li>\n              <a href={story.url} target=\"_blank\">{story.title}</a>\n            </li>)}\n          </ol>\n        }\n      </div>)\n  }, [stories, isLoading, isError])\n  return memoizedList\n\n}\n\nexport default List;","import '../css/app.css'\nimport React from 'react'\nimport Store from './Store'\nimport StoriesReducer from './StoriesReducer'\nimport axios from 'axios'\nimport SearchHistory from './SearchHistory'\nimport Navigation from './Navigation'\nimport Footer from './Footer'\nimport Search from './Search'\nimport List from './List'\nimport {Container, Row, Col} from 'react-bootstrap'\nimport { render } from '@testing-library/react'\n\nconst API_ENDPOINT = \"https://hn.algolia.com/api/v1/search?query=\"\n//export let Store = React.createContext()\n\nconst AppNew = () => {\n  let initialState = {\n    stories: [],\n    search: 'React',\n    url: API_ENDPOINT,\n    isLoading: false,\n    isError: false,\n    searchHistory: {}\n  }\n\n    const onSearchChange = (event) => {\n    console.log('event.target.children: ', event.target.value);\n    dispatch({\n      type: \"CHANGE_SEARCH\",\n      payload: event.target.value\n    })\n  }\n\n  const onSearchSubmit = (event) => {\n    event.preventDefault()\n    console.log('event.target.class: ', event.target.type)\n    const searchTerm = (event.target.type==='button')? event.target.value : state.search\n    const searchText = document.getElementById(\"search-text\");\n    searchText.value = ''\n\n\n    dispatch({\n      type: \"SET_URL\",\n      payload: searchTerm\n    })\n    dispatch({\n      type: \"ADD_TO_HISTORY\",\n      payload: searchTerm\n    })\n  }\n\n  let [state, dispatch] = React.useReducer(StoriesReducer, initialState)\n  React.useEffect(()=> {\n    dispatch({type: \"STORIES_FETCH_INIT\"})\n    console.log(\"State after stories_fetch_init: \", state)\n    //setTimeout(() => {\n      axios.get(state.url)\n      .then((response) => {\n        console.log(\"Filtered stories: \", response.data.hits.filter(story=>{\n          return story.title!=null\n        }));\n        dispatch({\n          type: \"STORIES_FETCH_SUCCESS\",\n          payload: response.data.hits.filter(story=>{\n            return story.title!=\"\" && story.url!=null\n          })\n        })\n      })\n      .catch((error) => {\n        console.error(error)\n      })\n    //}, 1000)\n\n  }, [state.url]) //on URL change\n  console.log(\"isLoading, isError: \", state.isLoading, state.isError)\n    return (\n      <Store.Provider value={{\n        state,\n        dispatch,\n        onSearchChange, \n        onSearchSubmit\n      }}>\n        <div className='app'>\n          <Navigation />\n          <SearchHistory />\n          <List>\n            <Search />\n          </List>\n          <Footer />\n        </div>\n      </Store.Provider>\n    )\n  }\n\n\n  // OLD RETURN\n//   return (\n//       <Store.Provider value = {{\n//           state,\n//           dispatch\n//       }}>\n//         <Container fluid className=\"App\" className=\"border\">\n//           {/* {(state.isLoading && !state.isError)?           \n//             <div>Stories are loading...</div>\n//             : */}\n        \n//             <NavigationNew>\n//               <SearchNew />\n//             </NavigationNew>\n    \n//             <Row>\n//               <Col className=\"col-5\"><ListNew /></Col>\n//             </Row>\n//         {/* } */}\n//         </Container>\n//       </Store.Provider>\n//     )\n// }\n\nexport default AppNew","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport {Store, state, dispatch} from './NewApp/Store'\nimport StoriesReducer from './NewApp/StoriesReducer'\n//import App from './App'\nimport AppNew from './NewApp/AppNew'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n      <AppNew />\n  </React.StrictMode>,\n  document.getElementById('container')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}